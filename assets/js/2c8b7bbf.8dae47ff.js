"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[135],{997:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"getting-started/field","title":"Field","description":"Field","source":"@site/docs/getting-started/field.mdx","sourceDirName":"getting-started","slug":"/getting-started/field","permalink":"/documentation-site/getting-started/field","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/getting-started/field.mdx","tags":[],"version":"current","frontMatter":{"title":"Field"},"sidebar":"docs","previous":{"title":"Introduction","permalink":"/documentation-site/"},"next":{"title":"Changelog","permalink":"/documentation-site/changelog"}}');var s=n(4848),d=n(8453);n(8069);const a={title:"Field"},l=void 0,o={},r=[{value:"Field",id:"field",level:2}];function c(e){const t={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"field",children:"Field"}),"\n",(0,s.jsxs)(t.p,{children:["Field elements are the basic unit of data in zero knowledge proof programming. Each field element can store a number up to almost 256 bits in size. You can think of a field element as a ",(0,s.jsx)(t.code,{children:"uint256"})," in Solidity."]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"For the cryptography inclined, the exact max value that a field can store is: 0"})}),"\n",(0,s.jsx)(t.p,{children:"For example, in typical programming, you might use:"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"const sum = 1 + 3"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"In o1js, you write this as:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"file=../../snippets/field/sum.ts start=start_sum_1 end=end_sum_1",children:"const sum1 = new Field(1).add(new Field(3));\n"})}),"\n",(0,s.jsx)(t.p,{children:"This can be simplified as:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"file=../../snippets/field/sum.ts start=start_sum_2 end=end_sum_2",children:"// Note that the `3` is automatically converted to a Field instance.\nconst sum2 = new Field(1).add(3);\n"})})]})}function m(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);