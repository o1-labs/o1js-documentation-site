"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[24366],{14162:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"basic-types/arrays","title":"Arrays","description":"Arrays in provable code must be of a fixed size.  Normal JavaScript arrays are a suitable value to pass into a provable function, but","source":"@site/docs/basic-types/arrays.mdx","sourceDirName":"basic-types","slug":"/basic-types/arrays","permalink":"/documentation-site/basic-types/arrays","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/basic-types/arrays.mdx","tags":[],"version":"current","frontMatter":{"title":"Arrays"},"sidebar":"docs","previous":{"title":"Merkle Trees","permalink":"/documentation-site/basic-types/merkle-trees"},"next":{"title":"Structs","permalink":"/documentation-site/basic-types/structs"}}');var s=a(74848),n=a(28453);const i={title:"Arrays"},o=void 0,l={},c=[];function d(e){const r={a:"a",code:"code",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["Arrays in provable code must be of a fixed size.  Normal JavaScript arrays are a suitable value to pass into a provable function, but\n",(0,s.jsx)(r.code,{children:"Array<T>"})," is not a suitable type.  o1js exports the ",(0,s.jsx)(r.code,{children:"Provable.Array"})," helper to generate provable array classes."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:"file=../snippets/arrays/arrays.ts start=start_provable_array end=end_provable_array",children:"const FieldArray3 = Provable.Array(Field, 3);\nconst SignatureArray2 = Provable.Array(Signature, 2);\n"})}),"\n",(0,s.jsx)(r.p,{children:"JavaScript arrays will satisfy the provable array type as long as they are of the correct size, so you don't need to worry too much about\ncasting them back and forth."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:"file=../snippets/arrays/arrays.ts start=start_in_witness end=end_in_witness",children:"const fieldArray = Provable.witness(FieldArray3, () => {\n  return [Field(1), Field(2), Field(3)];\n});\nfieldArray.map((x) => x.toBigInt()); // [1n, 2n, 3n]\n"})}),"\n",(0,s.jsx)(r.p,{children:"Here are some invalid examples:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",metastring:"file=../snippets/arrays/arrays.ts start=start_invalid_examples end=end_invalid_examples",children:"// Invalid: Dynamic arrays are not allowed in provable code\n// INVALID - DO NOT COPY\nlet dynamicArray = [];\ndynamicArray.push(Field(1)); // Error: Cannot use dynamic array operations\ndynamicArray.push(Field(2)); // Error: Array size must be known at compile time\n\n// Invalid: Array size cannot change\n// INVALID - DO NOT COPY\nconst arr = Provable.Array(Field, 2).empty();\narr.push(Field(1)); // Error: push() is not available on provable arrays\n"})}),"\n",(0,s.jsxs)(r.p,{children:["Read more at the language reference: ",(0,s.jsx)(r.a,{href:"/documentation-site/api-reference/variables/Provable#array",children:"Provable.Array"}),"."]})]})}function p(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,r,a)=>{a.d(r,{R:()=>i,x:()=>o});var t=a(96540);const s={},n=t.createContext(s);function i(e){const r=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(n.Provider,{value:r},e.children)}}}]);