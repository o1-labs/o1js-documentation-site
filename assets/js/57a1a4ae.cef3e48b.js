"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[5692],{6575:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"api-reference/namespaces/Experimental/functions/memoizeWitness","title":"memoizeWitness","description":"Defined in134","source":"@site/docs/api-reference/namespaces/Experimental/functions/memoizeWitness.md","sourceDirName":"api-reference/namespaces/Experimental/functions","slug":"/api-reference/namespaces/Experimental/functions/memoizeWitness","permalink":"/documentation-site/api-reference/namespaces/Experimental/functions/memoizeWitness","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/api-reference/namespaces/Experimental/functions/memoizeWitness.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Recursive","permalink":"/documentation-site/api-reference/namespaces/Experimental/functions/Recursive"},"next":{"title":"ActionBatch","permalink":"/documentation-site/api-reference/namespaces/Experimental/type-aliases/ActionBatch"}}');var i=t(4848),r=t(8453);const c={},a=void 0,o={},l=[{value:"Type Parameters",id:"type-parameters",level:2},{value:"Parameters",id:"parameters",level:2},{value:"type",id:"type",level:3},{value:"compute",id:"compute",level:3},{value:"Returns",id:"returns",level:2}];function p(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"function memoizeWitness<T>(type: FlexibleProvable<T>, compute: () => T): T\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Defined in: ",(0,i.jsx)(n.a,{href:"https://github.com/o1-labs/o1js/blob/89b7d1522af805d6d4c45a96d7a9cbc29a457aec/src/index.ts#L134",children:"index.ts:134"})]}),"\n",(0,i.jsx)(n.p,{children:"Like Provable.witness, but memoizes the witness during transaction construction\nfor reuse by the prover. This is needed to witness non-deterministic values."}),"\n",(0,i.jsx)(n.h2,{id:"type-parameters",children:"Type Parameters"}),"\n",(0,i.jsxs)(n.p,{children:["\u2022 ",(0,i.jsx)(n.strong,{children:"T"})]}),"\n",(0,i.jsx)(n.h2,{id:"parameters",children:"Parameters"}),"\n",(0,i.jsx)(n.h3,{id:"type",children:"type"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"/documentation-site/api-reference/type-aliases/FlexibleProvable",children:(0,i.jsx)(n.code,{children:"FlexibleProvable"})}),"<",(0,i.jsx)(n.code,{children:"T"}),">"]}),"\n",(0,i.jsx)(n.h3,{id:"compute",children:"compute"}),"\n",(0,i.jsxs)(n.p,{children:["() => ",(0,i.jsx)(n.code,{children:"T"})]}),"\n",(0,i.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"T"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var s=t(6540);const i={},r=s.createContext(i);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);