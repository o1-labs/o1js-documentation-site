"use strict";(self.webpackChunkdocumentation_site=self.webpackChunkdocumentation_site||[]).push([[1415],{3864:(t,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"writing-constraint-systems/witnesses","title":"Witnesses in Constraint Systems","description":"In a constraint system, a witness is kind of like a blank space that is purposefully left to be filled in by the prover. The size","source":"@site/docs/writing-constraint-systems/witnesses.mdx","sourceDirName":"writing-constraint-systems","slug":"/writing-constraint-systems/witnesses","permalink":"/documentation-site/writing-constraint-systems/witnesses","draft":false,"unlisted":false,"editUrl":"https://github.com/docs/writing-constraint-systems/witnesses.mdx","tags":[],"version":"current","frontMatter":{"title":"Witnesses in Constraint Systems"},"sidebar":"docs","previous":{"title":"Hashing","permalink":"/documentation-site/basic-types/hashing"},"next":{"title":"Conditional Logic in Constraint Systems","permalink":"/documentation-site/writing-constraint-systems/conditional-logic"}}');var i=s(4848),o=s(8453);const r={title:"Witnesses in Constraint Systems"},a=void 0,c={},l=[];function u(t){const e={code:"code",p:"p",pre:"pre",...(0,o.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"In a constraint system, a witness is kind of like a blank space that is purposefully left to be filled in by the prover. The size\nand shape of a witness must be known at compile time, but the value does not need to be known until the\nprover generates a proof."}),"\n",(0,i.jsxs)(e.p,{children:['Witnesses are useful because they allow you to "witness in" arbitrary data into a proof.  A classic use case is to compute square\nroot.  It is trivial to prove that ',(0,i.jsx)(e.code,{children:"x * x = y"}),", and it is not trivial to prove that ",(0,i.jsx)(e.code,{children:"x = sqrt(y)"}),".  Using a witness, we can use\nthe triviality of multiplication to prove square root."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-ts",metastring:"file=../../snippets/witnesses/witnesses.ts start=start_sqrt end=end_sqrt",children:"const x = 10;\n\n// unconstrained value of type UInt32\nconst w_sqrt = Provable.witness(UInt32, () => {\n  return UInt32.from(x);\n});\n\n// constraint added to w_sqrt to prove that it satisfies the square root function\nw_sqrt.mul(w_sqrt).assertEquals(UInt32.from(100));\n"})})]})}function d(t={}){const{wrapper:e}={...(0,o.R)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(u,{...t})}):u(t)}},8453:(t,e,s)=>{s.d(e,{R:()=>r,x:()=>a});var n=s(6540);const i={},o=n.createContext(i);function r(t){const e=n.useContext(o);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:r(t.components),n.createElement(o.Provider,{value:e},t.children)}}}]);